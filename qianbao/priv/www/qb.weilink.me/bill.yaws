<!DOCTYPE html> 

<erl>

-include("qb.hrl").

tag() -> "bill.yaws".

%% AJAX request only
out(A) -> out(qb_html:is_ajax_req(A), A).
out(false, A) ->  {redirect_local, qb_url:index()};
out(true, A) -> out_1(A).

%% Is session id present as cookie?
out_1(A) -> out_1(yaws_api:find_cookie_val(qb_session:cookie_name(), (A#arg.headers)#headers.cookie), A).
out_1([], A) ->  {redirect_local, qb_url:login(qb_url:this(A))};
out_1(SessionId, A) -> out_2(qb_session:get(SessionId), A).

%% Session id must be valid
out_2(undefined, A) -> {redirect_local, qb_url:login(qb_url:this(A))};
out_2(Session, A) -> out_3(Session, queryvar(A, "m"), queryvar(A, "a")).

%% Merchant id "m=" must exist
out_3(_, undefined, _) -> {redirect_local, qb_url:error("没有指定商家", qb_url:home())};
out_3(#qbs{uid=UserId}, {ok, MerchantId}, Amount) -> out_4(UserId, qb_merchant:get(MerchantId), Amount).

%% Merchant id must be valid, amount "a=" is optional
out_4(UserId, undefined, _) -> {redirect_local, qb_url:error("找不到指定的商家", qb_url:home())};
out_4(UserId, #qbm{id=MerchantId}, undefined) -> out_5(UserId, MerchantId, 0.00);
out_4(UserId, #qbm{id=MerchantId}, {ok, Amount}) -> out_5(UserId, MerchantId, catch list_to_float(Amount)).

out_5(UserId, MerchantId, Amount) when is_float(Amount) -> out_6(qb_trans:new(UserId, MerchantId), Amount);
out_5(_, _, _) -> {redirect_local, qb_url:error("错误的金额", qb_url:home())}.
    
%% Initiate transaction
out_6(undefined, _) -> {redirect_local, qb_url:error("未能启动交易", qb_url:home())};
out_6(T, Amount) ->  {ehtml, page(T, Amount)}.
    
page(T, Amount) ->
    qb_debug:d(tag(), "start building bill page"),
    {'div', [{id, "bill-page"} ,{'data-role', "page"}],
     [
      page_header(),
      page_content(T, Amount)
     ]}.

page_header() ->
    {'div', [{'data-role', "header"}, {'data-position', "fixed"}],
     [
      qb_html:a_home(),
      {h1, [], "买单"}
     ]
    }.

page_content(T, Amount) ->
    {'div', [{'data-role', "content"}],
     [
      ul_bill_sheet(T, Amount),
      ul_payment_options()
     ]}.

ul_bill_sheet(T, Amount) ->
    U = qb_user:get(T#qbt.uid),
    {ul, [{'data-role', "listview"}, {'data-inset', "true"}],
     [
      li_divider("交易代码"),
      {li, [], 
       [T#qbt.id,
	{input, [{type, "hidden"}, {name, "tid"}, {value, T#qbt.id}]}
       ]},
      li_divider("确认商家"),
      li_merchant_info(qb_merchant:get(T#qbt.mid)),
      li_divider("消费金额"),
      li_billed_amount_input(Amount),
      li_divider("使用优惠"),
      li_promo(qb_promo:get(T#qbt.mid, undefined), qb_promo:get(T#qbt.mid, T#qbt.uid)),
      li_divider("使用积分"),
      li_use_points(U#qbu.pts),
      li_divider("消费明细"),
      li_summary()
     ]}.

ul_payment_options() ->
    {ul, [{'data-role', "listview"}, {'data-inset', "true"}],
     [li_divider("万维通密码"),
      li_password_input(),
      li_pay()
     ]}.

li_divider(Text) -> {li, [{'data-role', "list_divider"}], Text}.

li_merchant_info(M) ->
    {li, [], 
     [M#qbm.name, {br},
      M#qbm.addr, {br},
      lists:flatten(io_lib:format("返点: 实际消费的~p%", [M#qbm.rebate*100])),
      {input, [{type, "hidden"}, {name, "rebate"}, {value, M#qbm.rebate}]}
     ]}.

li_billed_amount_input(Amount) -> 
    Amt = lists:flatten(io_lib:format("~.2f", [Amount])),
    {li, [], 
     [
      {input, [{type, "number"}, {name, "amt0"}, {value, Amt}]}
     ]}.

li_promo(undefined, undefined) -> li_promo([], []);
li_promo(undefined, PromoForUser) -> li_promo([], PromoForUser);
li_promo(PromoForAll, undefined) -> li_promo(PromoForAll, []);
li_promo(PromoForAll, PromoForUser) ->
    qb_debug:d(tag(), "building promo list"),
    Opts1 = lists:map(
	      fun(#qbp{pid=Pid, value=Value, desc=Desc}) ->
		      {option, [{value, lists:flatten(io_lib:format("~s|~p", [Pid, Value]))}], "(专属) " ++ Desc}
	      end, PromoForUser),
    Opts2 = lists:map(
	      fun(#qbp{pid=Pid, value=Value, desc=Desc}) ->
		      {option, [{value, lists:flatten(io_lib:format("~s|~p", [Pid, Value]))}], Desc}
	      end, PromoForAll),
    qb_debug:d(tag(), "done building promo list"),
    {li, [],
     {select, [{id, "sel-promos"}], 
      [{option, [{value, "undefined|0"}], "不使用"}] ++ Opts1 ++ Opts2
     }
    }.

li_use_points(Points) ->
    {li, [],
     {label, [],
      [
       {input, [{type, "checkbox"}, {name, "if-use-points"}, {checked, "checked"}]},
       lists:flatten(io_lib:format("最多~p分", [Points])),
       {input, [{type, "hidden"}, {name, "points"}, {value, Points/10}]}
      ]}
    }.

li_summary() -> {li, [{id, "li-bill-summary"}]}.

li_password_input() -> {li, [], {input, [{type, "password"}, {name, "pwd"}]}}.

li_pay() -> {li, [], {a, [{id, "a-pay-button"}, {href, "#"}], "付款"}}.

% /pay.yaws?tid, pwd, amt0,pid, promo_discnt, pts_used, amt_actual, pts_earned 
</erl>
